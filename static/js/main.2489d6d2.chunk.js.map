{"version":3,"sources":["swag_bark.mp3","vowel/Vowel.js","class/sound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Vowel","props","SoundPlay","src","Howl","play","handleClick","bind","e","this","sound","playSound","console","log","Howler","volume","onClick","displayName","React","Component","Sound","mp3_filename","format","autoplay","loop","_displayName","App","sounds","push","Container","totalNumSounds","length","index","elements","Row","Col","createRows","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,uC,oJC2B5BC,E,YAnBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KALRC,UAAY,SAACC,GACG,IAAIC,OAAK,CAACD,QAClBE,QAIN,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKF,MAAO,EAHK,E,yEAKPG,GACVC,KAAKR,MAAMS,MAAMC,YACjBC,QAAQC,IAAI,2B,+BAIZ,OADAC,SAAOC,OAAO,IAEZ,6BACE,wBAAIC,QAASP,KAAKH,aAAcG,KAAKR,MAAMS,MAAMO,kB,GAlBrCC,IAAMC,W,wBCwBXC,G,iBAvBX,WAAYH,EAAaI,GAAc,oBACnCZ,KAAKQ,YAAcA,EACnBR,KAAKY,aAAeA,E,wDASpB,IAAMlB,EAAM,CACRA,IAAK,CAACM,KAAKY,cACXC,OAAQ,CAAC,OACTC,UAAU,EACVC,MAAM,EACNT,OAAQ,IAEE,IAAIX,OAAKD,GACjBE,S,kCAdN,OAAOI,KAAKgB,c,aAEAR,GACZR,KAAKgB,aAAeR,M,MCDtBS,G,6LAEF,IAAIC,EAAS,GAIb,OAHAA,EAAOC,KAAK,IAAIR,EAAM,UAAW,kEACjCO,EAAOC,KAAK,IAAIR,EAAM,SAAU,kEAChCO,EAAOC,KAAK,IAAIR,EAAM,UAAW,kEAE/B,kBAACS,EAAA,EAAD,KAON,SAAoBF,GAClB,IACMG,EAAiBH,EAAOI,OAC1BC,EAAQ,EACRC,EAAW,GAEf,KAAOD,EAAQF,GACTA,EANW,KAObG,EAASL,KACP,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,kBAAC,EAAD,CAAOzB,MAAOiB,EAAOK,MAC1B,kBAACG,EAAA,EAAD,KAAK,kBAAC,EAAD,CAAOzB,MAAOiB,EAAOK,EAAM,MAChC,kBAACG,EAAA,EAAD,KAAK,kBAAC,EAAD,CAAOzB,MAAOiB,EAAOK,EAAM,QAItCA,GAfe,EAiBjB,OAAOC,EAxBAG,CAAWT,Q,GARFT,IAAMC,YAmCxBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAElCd,QCpCKe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNR,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.2489d6d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swag_bark.02bbb467.mp3\";","import React from 'react';\nimport {Howl, Howler} from 'howler'\n\nclass Vowel extends React.Component {\n  SoundPlay = (src)=> {\n    const sound = new Howl({src})\n    sound.play();\n  }\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.play = false\n  }\n  handleClick(e) {   \n    this.props.sound.playSound()\n    console.log('The link was clicked.');\n  }\n  render() {\n    Howler.volume(0.5)\n    return (\n      <div>\n        <h2 onClick={this.handleClick}>{this.props.sound.displayName}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Vowel;","import {Howl, Howler} from 'howler'\nimport Bark from '../swag_bark.mp3'\n\nclass Sound {\n    constructor(displayName, mp3_filename){\n        this.displayName = displayName;\n        this.mp3_filename = mp3_filename\n    }\n    get displayName() {\n        return this._displayName;\n    }\n    set displayName(displayName) {\n        this._displayName = displayName;\n    }\n    playSound() {\n        const src = {\n            src: [this.mp3_filename],\n            format: ['mp3'],\n            autoplay: true,\n            loop: false,\n            volume: 0.5,\n        }\n        const sound = new Howl(src)\n        sound.play();\n    }\n}\n\nexport default Sound;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Vowel from './vowel/Vowel';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Sound from './class/sound'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nclass App extends React.Component {\n  render() {\n    let sounds = [];\n    sounds.push(new Sound('Short I', 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'))\n    sounds.push(new Sound('Long I', 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'))\n    sounds.push(new Sound('Short A', 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'))\n    return (\n      <Container>\n        {createRows(sounds)}\n      </Container>\n    );\n  }\n}\n\nfunction createRows(sounds) {\n  const row_length=3\n  const totalNumSounds = sounds.length;\n  let index = 0;\n  let elements = []\n\n  while (index < totalNumSounds) {\n    if (totalNumSounds-row_length < row_length) {\n      elements.push(\n        <Row>\n          <Col><Vowel sound={sounds[index]}/></Col>\n          <Col><Vowel sound={sounds[index+1]}/></Col>\n          <Col><Vowel sound={sounds[index+2]}/></Col>\n        </Row>\n      )\n    }\n    index+=row_length\n  }\n  return elements\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}